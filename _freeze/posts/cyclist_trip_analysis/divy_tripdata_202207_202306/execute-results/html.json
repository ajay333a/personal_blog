{
  "hash": "5d6f783e9ffe5c45ca702719d18ede0f",
  "result": {
    "markdown": "---\ntitle: \"CYCLIST BIKE SHARE\"\nauthor: \"Ajay Shankar A\"\ndate: \"2023-08-14\"\nformat: html\ncode-fold: false\ncategories: [analysis, code, EDA]\n---\n\n\n# CYCLIST BIKE SHARE\n\n## Introduction\n\nThe analysis is done on **Cyclist Trip Data** obtained from *Coursera Google Data Analytics* course as part of Cap Stone Project.\n\nThe data contains month wise travel usage of bikes from the year of 2015-2023. We will be concentrating on data gathered in between *July-2022* to *June-2023* which will cover an entire year.\n\nLet's load the required packages first\n\n-   Loading `tidyverse` and `gt` packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gt)\n```\n:::\n\n\n### Loading and Formatting Data\n\n-   Let's look at the structure of the data in one of the downloaded `.csv` files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrpdata_july_2022<-read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202207-divvy-tripdata/202207-divvy-tripdata.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 823488 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): ride_id, rideable_type, start_station_name, start_station_id, end_...\ndbl  (4): start_lat, start_lng, end_lat, end_lng\ndttm (2): started_at, ended_at\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(trpdata_july_2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 823,488\nColumns: 13\n$ ride_id            <chr> \"954144C2F67B1932\", \"292E027607D218B6\", \"5776585258…\n$ rideable_type      <chr> \"classic_bike\", \"classic_bike\", \"classic_bike\", \"cl…\n$ started_at         <dttm> 2022-07-05 08:12:47, 2022-07-26 12:53:38, 2022-07-…\n$ ended_at           <dttm> 2022-07-05 08:24:32, 2022-07-26 12:55:31, 2022-07-…\n$ start_station_name <chr> \"Ashland Ave & Blackhawk St\", \"Buckingham Fountain …\n$ start_station_id   <chr> \"13224\", \"15541\", \"15541\", \"15541\", \"TA1307000117\",…\n$ end_station_name   <chr> \"Kingsbury St & Kinzie St\", \"Michigan Ave & 8th St\"…\n$ end_station_id     <chr> \"KA1503000043\", \"623\", \"623\", \"TA1307000164\", \"TA13…\n$ start_lat          <dbl> 41.90707, 41.86962, 41.86962, 41.86962, 41.89147, 4…\n$ start_lng          <dbl> -87.66725, -87.62398, -87.62398, -87.62398, -87.626…\n$ end_lat            <dbl> 41.88918, 41.87277, 41.87277, 41.79526, 41.93625, 4…\n$ end_lng            <dbl> -87.63851, -87.62398, -87.62398, -87.59647, -87.652…\n$ member_casual      <chr> \"member\", \"casual\", \"casual\", \"casual\", \"member\", \"…\n```\n:::\n:::\n\n\n-   Let's look at the columns and try to understand what they represent\n    -   `ride_id` is the unique identification token generated for each ride that was initiated.\n    -   `rideable_type` indicates the type of bike used for the ride.\n    -   `started_at` and `ended_at` give us the time when the ride began and the ride ended respectively.\n    -   `start_station_name` and `end_station_name` give us the names of stations where ride began and ended respectively.\n    -   `start_station_id` and `end_station_id` are unique ID's given to stations.\n    -   `start_lat` and `start_lng` represent co-ordinates where the ride began.\n    -   `end_lat` and `end_lng` represent co-ordinates where the ride stopped.\n    -   `member_casual` identifies if the rider is a member or casual rider of the bike.\n\nThe `trpdata_july_2022` contains 823488 rows and 13 columns. In the results we can see all the columns and their data types.\n\n-   **Lets load data of remaining 11 months.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrpdata_aug_2022 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202208-divvy-tripdata/202208-divvy-tripdata.csv\")\n\ntrpdata_sept_2022<- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202209-divvy-tripdata/202209-divvy-publictripdata.csv\")\n\ntrpdata_oct_2022<- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202210-divvy-tripdata/202210-divvy-tripdata_raw.csv\")\n\ntrpdata_nov_2022<- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202211-divvy-tripdata/202211-divvy-tripdata.csv\")\n\ntrpdata_dec_2022 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202212-divvy-tripdata/202212-divvy-tripdata.csv\")\n\ntrpdata_jan_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202301-divvy-tripdata/202301-divvy-tripdata.csv\")\n\ntrpdata_feb_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202302-divvy-tripdata/202302-divvy-tripdata.csv\")\n\ntrpdata_mar_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202303-divvy-tripdata/202303-divvy-tripdata.csv\")\n\ntrpdata_apr_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202304-divvy-tripdata/202304-divvy-tripdata.csv\")\n\ntrpdata_may_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202305-divvy-tripdata/202305-divvy-tripdata.csv\")\n\ntrpdata_june_2023 <- read_csv(\"F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202306-divvy-tripdata/202306-divvy-tripdata.csv\")\n```\n:::\n\n\nAs structure of `.csv`'s is same across the all the files lets combine all the `.csv` files into a single data frame which contains data of all 12 months.\n\n-   **Combining all the monthly data to one previous year data(`data_one_year`).**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_one_year <- rbind(trpdata_july_2022, trpdata_aug_2022,\n                     trpdata_sept_2022, trpdata_oct_2022,\n                     trpdata_nov_2022, trpdata_dec_2022,\n                     trpdata_jan_2023, trpdata_feb_2023,\n                     trpdata_mar_2023, trpdata_apr_2023,\n                     trpdata_may_2023, trpdata_june_2023)\n\nglimpse(data_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,779,444\nColumns: 13\n$ ride_id            <chr> \"954144C2F67B1932\", \"292E027607D218B6\", \"5776585258…\n$ rideable_type      <chr> \"classic_bike\", \"classic_bike\", \"classic_bike\", \"cl…\n$ started_at         <dttm> 2022-07-05 08:12:47, 2022-07-26 12:53:38, 2022-07-…\n$ ended_at           <dttm> 2022-07-05 08:24:32, 2022-07-26 12:55:31, 2022-07-…\n$ start_station_name <chr> \"Ashland Ave & Blackhawk St\", \"Buckingham Fountain …\n$ start_station_id   <chr> \"13224\", \"15541\", \"15541\", \"15541\", \"TA1307000117\",…\n$ end_station_name   <chr> \"Kingsbury St & Kinzie St\", \"Michigan Ave & 8th St\"…\n$ end_station_id     <chr> \"KA1503000043\", \"623\", \"623\", \"TA1307000164\", \"TA13…\n$ start_lat          <dbl> 41.90707, 41.86962, 41.86962, 41.86962, 41.89147, 4…\n$ start_lng          <dbl> -87.66725, -87.62398, -87.62398, -87.62398, -87.626…\n$ end_lat            <dbl> 41.88918, 41.87277, 41.87277, 41.79526, 41.93625, 4…\n$ end_lng            <dbl> -87.63851, -87.62398, -87.62398, -87.59647, -87.652…\n$ member_casual      <chr> \"member\", \"casual\", \"casual\", \"casual\", \"member\", \"…\n```\n:::\n:::\n\n\n-   `data_one_year` data frame contains data from July-2022 to June-2023.\n\n### Cleaning the data\n\n-   Checking and counting \"NA\" in each column of the data frame. Data is much better without \"NA\" as they can cause problems while aggregating data and calculating averages and sums.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_in_cols <- data_one_year %>% map(is.na) %>% map(sum) %>% unlist()\n\nna_in_cols\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           ride_id      rideable_type         started_at           ended_at \n                 0                  0                  0                  0 \nstart_station_name   start_station_id   end_station_name     end_station_id \n            857860             857992             915655             915796 \n         start_lat          start_lng            end_lat            end_lng \n                 0                  0               5795               5795 \n     member_casual \n                 0 \n```\n:::\n:::\n\n\n-   As NA's are not present in the times columns i.e, `started_at` and `ended_at` we don't need to worry ourselves about writing `na.rm` during aggregation and manipulation of data.\n\n-   Finding the length of rides by making a new column `ride_length` in minutes and making sure that the `ride_length` is not negative by using `if_else` function. Eliminating stations where station names and longitude and latitude co-ordinates are not present.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# As we remove all the NA's it is better to save data in a variable.\ndata_one_year_raw <- data_one_year %>% \n  mutate(ride_length = difftime(ended_at, started_at,\n                                units = \"min\")) %>%\n  mutate(ride_length = as.numeric(ride_length))\n\ndata_one_year <- data_one_year_raw %>% \n  mutate(ride_length = if_else(ride_length < 0, 0, ride_length)) %>% \n  filter(start_station_name != \"\" & end_station_name != \"\" & \n         !is.na(start_lat) & !is.na(start_lng) &\n         !is.na(end_lat) & !is.na(end_lng)) %>% arrange(ride_length)\n\n\nglimpse(data_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,409,335\nColumns: 14\n$ ride_id            <chr> \"86CD09DA24761714\", \"27024CD08288BD45\", \"029D853B5C…\n$ rideable_type      <chr> \"electric_bike\", \"electric_bike\", \"classic_bike\", \"…\n$ started_at         <dttm> 2022-07-20 16:21:48, 2022-07-30 23:42:46, 2022-07-…\n$ ended_at           <dttm> 2022-07-20 16:21:48, 2022-07-30 23:42:46, 2022-07-…\n$ start_station_name <chr> \"Racine Ave & Fullerton Ave\", \"Albany Ave & 26th St…\n$ start_station_id   <chr> \"TA1306000026\", \"15691\", \"chargingstx5\", \"chargings…\n$ end_station_name   <chr> \"Racine Ave & Fullerton Ave\", \"Albany Ave & 26th St…\n$ end_station_id     <chr> \"TA1306000026\", \"15691\", \"chargingstx5\", \"chargings…\n$ start_lat          <dbl> 41.92556, 41.84452, 41.94335, 41.94335, 41.94335, 4…\n$ start_lng          <dbl> -87.65859, -87.70209, -87.67067, -87.67067, -87.670…\n$ end_lat            <dbl> 41.92556, 41.84448, 41.94335, 41.94335, 41.94335, 4…\n$ end_lng            <dbl> -87.65840, -87.70201, -87.67067, -87.67067, -87.670…\n$ member_casual      <chr> \"member\", \"casual\", \"member\", \"member\", \"casual\", \"…\n$ ride_length        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n:::\n:::\n\n\n## Analysis of Data\n\n### Aggregating data by Rider type and Bike type.\n\n-   Aggregating data to see **\"Average minutes per ride\"** grouped by \"bike type\" and \"rider type\" after removing rides less than 2 minutes (As rides less than 2 minutes tend to have the same start and stop stations.).\n\n\n::: {#tbl-avg_ride_legnth .cell tbl-cap='Average minutes per ride'}\n\n```{.r .cell-code}\ndata_one_year_aggregate <- data_one_year %>% \n  select(ride_id, rideable_type, member_casual, started_at, ended_at,\n         ride_length, everything()) %>%\n  filter(ride_length >= 2) %>% \n  summarise(\"Number of Rides\" = n(),\n            \"Ride Length\" = sum(ride_length, na.rm = TRUE),\n            \"Max Ride Length\" = round(max(ride_length), 2),\n            \"Avg Ride Length in Minutes\" = round(mean(ride_length), 2),\n            .by = c(member_casual, rideable_type)) %>% \n  arrange(desc(\"Avg Ride Length in Minutes\")) %>% \n  gt() %>% tab_header(title = \"Average length of Rides\") %>% \n  cols_label(member_casual = \"Rider type\",\n             rideable_type = \"Bike type\")\n\ndata_one_year_aggregate\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"wfxnvwgary\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#wfxnvwgary table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#wfxnvwgary thead, #wfxnvwgary tbody, #wfxnvwgary tfoot, #wfxnvwgary tr, #wfxnvwgary td, #wfxnvwgary th {\n  border-style: none;\n}\n\n#wfxnvwgary p {\n  margin: 0;\n  padding: 0;\n}\n\n#wfxnvwgary .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#wfxnvwgary .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wfxnvwgary .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wfxnvwgary .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wfxnvwgary .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wfxnvwgary .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wfxnvwgary .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wfxnvwgary .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wfxnvwgary .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#wfxnvwgary .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#wfxnvwgary .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wfxnvwgary .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wfxnvwgary .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wfxnvwgary .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wfxnvwgary .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wfxnvwgary .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#wfxnvwgary .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#wfxnvwgary .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#wfxnvwgary .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wfxnvwgary .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#wfxnvwgary .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wfxnvwgary .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wfxnvwgary .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wfxnvwgary .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wfxnvwgary .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wfxnvwgary .gt_left {\n  text-align: left;\n}\n\n#wfxnvwgary .gt_center {\n  text-align: center;\n}\n\n#wfxnvwgary .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wfxnvwgary .gt_font_normal {\n  font-weight: normal;\n}\n\n#wfxnvwgary .gt_font_bold {\n  font-weight: bold;\n}\n\n#wfxnvwgary .gt_font_italic {\n  font-style: italic;\n}\n\n#wfxnvwgary .gt_super {\n  font-size: 65%;\n}\n\n#wfxnvwgary .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#wfxnvwgary .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#wfxnvwgary .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#wfxnvwgary .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#wfxnvwgary .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#wfxnvwgary .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#wfxnvwgary .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"6\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>Average length of Rides</td>\n    </tr>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Rider type\">Rider type</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Bike type\">Bike type</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Number of Rides\">Number of Rides</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Ride Length\">Ride Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Max Ride Length\">Max Ride Length</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Avg Ride Length in Minutes\">Avg Ride Length in Minutes</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"member_casual\" class=\"gt_row gt_left\">member</td>\n<td headers=\"rideable_type\" class=\"gt_row gt_left\">classic_bike</td>\n<td headers=\"Number of Rides\" class=\"gt_row gt_right\">1630991</td>\n<td headers=\"Ride Length\" class=\"gt_row gt_right\">21996488</td>\n<td headers=\"Max Ride Length\" class=\"gt_row gt_right\">1497.87</td>\n<td headers=\"Avg Ride Length in Minutes\" class=\"gt_row gt_right\">13.49</td></tr>\n    <tr><td headers=\"member_casual\" class=\"gt_row gt_left\">casual</td>\n<td headers=\"rideable_type\" class=\"gt_row gt_left\">classic_bike</td>\n<td headers=\"Number of Rides\" class=\"gt_row gt_right\">781530</td>\n<td headers=\"Ride Length\" class=\"gt_row gt_right\">19383358</td>\n<td headers=\"Max Ride Length\" class=\"gt_row gt_right\">1497.75</td>\n<td headers=\"Avg Ride Length in Minutes\" class=\"gt_row gt_right\">24.80</td></tr>\n    <tr><td headers=\"member_casual\" class=\"gt_row gt_left\">casual</td>\n<td headers=\"rideable_type\" class=\"gt_row gt_left\">electric_bike</td>\n<td headers=\"Number of Rides\" class=\"gt_row gt_right\">709649</td>\n<td headers=\"Ride Length\" class=\"gt_row gt_right\">11372659</td>\n<td headers=\"Max Ride Length\" class=\"gt_row gt_right\">479.98</td>\n<td headers=\"Avg Ride Length in Minutes\" class=\"gt_row gt_right\">16.03</td></tr>\n    <tr><td headers=\"member_casual\" class=\"gt_row gt_left\">member</td>\n<td headers=\"rideable_type\" class=\"gt_row gt_left\">electric_bike</td>\n<td headers=\"Number of Rides\" class=\"gt_row gt_right\">984688</td>\n<td headers=\"Ride Length\" class=\"gt_row gt_right\">10968684</td>\n<td headers=\"Max Ride Length\" class=\"gt_row gt_right\">480.00</td>\n<td headers=\"Avg Ride Length in Minutes\" class=\"gt_row gt_right\">11.14</td></tr>\n    <tr><td headers=\"member_casual\" class=\"gt_row gt_left\">casual</td>\n<td headers=\"rideable_type\" class=\"gt_row gt_left\">docked_bike</td>\n<td headers=\"Number of Rides\" class=\"gt_row gt_right\">136794</td>\n<td headers=\"Ride Length\" class=\"gt_row gt_right\">6899998</td>\n<td headers=\"Max Ride Length\" class=\"gt_row gt_right\">32035.45</td>\n<td headers=\"Avg Ride Length in Minutes\" class=\"gt_row gt_right\">50.44</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nWe can clearly notice in @tbl-avg_ride_legnth that **member** riders have more number of rides with both **classic and electric bikes** while the average ride length is higher with **casual** riders.\n\n-   Calculating and visualizing **Average ride length** by \"Rider type\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_ride_by_rideable_type <- data_one_year %>%\n  rename(\"Rider type\" = member_casual, \"Bike type\" = rideable_type) %>% \n  summarise(ride_length = sum(ride_length, na.rm = TRUE),\n            ride_count = n(),\n            avg_ride_length = ride_length/ride_count,\n            .by = c(`Rider type`, `Bike type`)) %>% \n  ggplot(aes(`Rider type`, avg_ride_length)) + \n  geom_col(aes(fill = `Bike type`), position = \"dodge\") + \n  labs(x = \"Bike type\", y = \"Avg Length of Ride(Minutes)\",\n       title  = \"Average ride length by Bike type\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 18),\n        legend.position = \"bottom\")\n\naverage_ride_by_rideable_type\n```\n\n::: {.cell-output-display}\n![Average Ride Length by Rider type and Member type](divy_tripdata_202207_202306_files/figure-html/fig-avg_ride_length-1.png){#fig-avg_ride_length width=672}\n:::\n:::\n\n\nThe above @fig-avg_ride_length clearly shows that members average ride lengths between bike types doesn't differ much for **member** riders but differs with **casual** riders upto **8 minutes**.\n\n::: highlight-box\nFurther down in the analysis \"docked_bike\" type is dropped as no proper documentation is available in the course.\n:::\n\n### Analysing data by Time of the year and Ride Length\n\n-   Calculating and visualizing ride patterns in a week for number of rides.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrideable_order <- c(\"classic_bike\", \"electric_bike\", \"docked_bike\")\n\nrides_on_days <- data_one_year %>%\n  filter(rideable_type != \"docked_bike\") %>%\n  mutate(month = month(started_at, label = TRUE, abbr = FALSE)) %>% \n  mutate(rideable_type = factor(rideable_type, levels = rideable_order)) %>% ggplot(aes(wday(started_at, label = TRUE, abbr = FALSE))) + \n  geom_bar(aes(fill = member_casual), position = \"dodge\") +\n  facet_wrap(~month, nrow = 3) + \n  labs(x = \"Day of the Week\", y = \"Number of rides\",\n       title = \"Riding pattrens on Weekdays of each Month\",\n       subtitle = \"From July-2022 to June-2023\",\n       fill = \"Type of Rider\") +\n  theme_light() +\n  theme(legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(size = 18))\n\nrides_on_days\n```\n\n::: {.cell-output-display}\n![Riding pattrens in Weekdays of each Month](divy_tripdata_202207_202306_files/figure-html/fig-Ride_patterns_in_weekdays-1.png){#fig-Ride_patterns_in_weekdays width=1050}\n:::\n:::\n\n\nThe above @fig-Ride_patterns_in_weekdays clearly shows how the number of rides change due to seasons. In winters the number of rides decrease very drastically may be because of temperature and snow. In Summers the number of rides are at its peak.\n\nThe number of rides driven by **member** riders are increases through the week especially in working week days but for casual riders the rides increase in the weekends. The @fig-Ride_patterns_in_weekdays shows number of rides on Saturdays and Sundays by casual members overtake membership riders in the months of July and August.\n\n-   Comparing variation in ride lengths of average and total ride lengths by bike type.\n\nAggregating data for the visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrides_on_days <- data_one_year %>%\n  mutate(day = wday(started_at, label = TRUE, abbr = FALSE),\n         month = month(started_at, label = TRUE, abbr = FALSE)) %>% \n  summarise(ride_count = n(),\n            sum_ride_length = sum(ride_length, na.rm = TRUE),\n            avg_ride_length = mean(ride_length, na.rm = TRUE),\n            .by = c(month, day, member_casual))\n\nrides_on_days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 6\n   month day       member_casual ride_count sum_ride_length avg_ride_length\n   <ord> <ord>     <chr>              <int>           <dbl>           <dbl>\n 1 July  Wednesday member             47725         605175.            12.7\n 2 July  Saturday  casual             74543        2057158.            27.6\n 3 July  Tuesday   member             46360         588327.            12.7\n 4 July  Tuesday   casual             31415         705946.            22.5\n 5 July  Saturday  member             53796         817724.            15.2\n 6 July  Friday    casual             42333         960160             22.7\n 7 July  Thursday  casual             35800         759804.            21.2\n 8 July  Sunday    casual             61198        1715527.            28.0\n 9 July  Thursday  member             48572         623503.            12.8\n10 July  Friday    member             48221         616243.            12.8\n# ℹ 158 more rows\n```\n:::\n:::\n\n\n**Let's visualize the aggregated data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrides_on_days_len <- rides_on_days %>%\n  ggplot(aes(day, sum_ride_length))+\n  geom_col(aes(fill = member_casual), position = \"dodge\")+\n  facet_wrap(~month, ncol = 3)+\n  labs(x = \"Day of the Week\", y = \"Total Length of Rides (Minutes)\",\n       title = \"Total Minutes driven by Riders\",\n       fill = \"Type of Rider\") +\n  theme(legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(size = 18))\n\nrides_on_days_len\n```\n\n::: {.cell-output-display}\n![Total Ride lengths through out the year by member types.](divy_tripdata_202207_202306_files/figure-html/fig-Riding_patterns_by_total_ride_length-1.png){#fig-Riding_patterns_by_total_ride_length width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrides_on_days_len_avg <- rides_on_days %>%\n  ggplot(aes(day, avg_ride_length))+\n  geom_col(aes(fill = member_casual), position = \"dodge\")+\n  facet_wrap(~month, ncol = 3) +\n  labs(x = \"Day of the Week\", y = \"Average Length of Rides (Minutes)\",\n       title = \"Average Minutes driven by Riders\",\n       fill = \"Type of Rider\") +\n  theme(legend.position = \"top\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(size = 18))\n\nrides_on_days_len_avg\n```\n\n::: {.cell-output-display}\n![Average Ride lengths through out year by member types.](divy_tripdata_202207_202306_files/figure-html/fig-Riding_patterns_by_avg_ride_length-1.png){#fig-Riding_patterns_by_avg_ride_length width=672}\n:::\n:::\n\n\nThe **ride length** is varying across months and seasons just as number of rides but **average ride length** is not fluctuating that much across the year.\n\n### Analysing of Stations and Routes.\n\n-   Removing \"NA\" and blanks from the stations columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_one_year <- data_one_year %>%\n  drop_na(start_station_name, end_station_name ) %>% \n  filter(start_station_name != \"\" & end_station_name != \"\",\n         started_at != ended_at) \n\nglimpse(data_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,409,072\nColumns: 14\n$ ride_id            <chr> \"029D853B5C38426E\", \"C1D6D749139CB6C0\", \"D3E7C0B68E…\n$ rideable_type      <chr> \"classic_bike\", \"classic_bike\", \"classic_bike\", \"cl…\n$ started_at         <dttm> 2022-07-26 20:07:33, 2022-07-26 20:08:04, 2022-07-…\n$ ended_at           <dttm> 2022-07-26 19:59:34, 2022-07-26 19:59:34, 2022-07-…\n$ start_station_name <chr> \"Lincoln Ave & Roscoe St*\", \"Lincoln Ave & Roscoe S…\n$ start_station_id   <chr> \"chargingstx5\", \"chargingstx5\", \"chargingstx5\", \"ch…\n$ end_station_name   <chr> \"Lincoln Ave & Roscoe St*\", \"Lincoln Ave & Roscoe S…\n$ end_station_id     <chr> \"chargingstx5\", \"chargingstx5\", \"chargingstx5\", \"ch…\n$ start_lat          <dbl> 41.94335, 41.94335, 41.94335, 41.94335, 41.93945, 4…\n$ start_lng          <dbl> -87.67067, -87.67067, -87.67067, -87.67067, -87.663…\n$ end_lat            <dbl> 41.94335, 41.94335, 41.94335, 41.94335, 41.93948, 4…\n$ end_lng            <dbl> -87.67067, -87.67067, -87.67067, -87.67067, -87.663…\n$ member_casual      <chr> \"member\", \"member\", \"casual\", \"casual\", \"member\", \"…\n$ ride_length        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n:::\n:::\n\n\n-   Making a new column to identify travelled routes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_one_year <- data_one_year %>% \n  mutate(stations_travelled = paste(start_station_name, \n                                     \"-\", end_station_name))\n\nglimpse(data_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,409,072\nColumns: 15\n$ ride_id            <chr> \"029D853B5C38426E\", \"C1D6D749139CB6C0\", \"D3E7C0B68E…\n$ rideable_type      <chr> \"classic_bike\", \"classic_bike\", \"classic_bike\", \"cl…\n$ started_at         <dttm> 2022-07-26 20:07:33, 2022-07-26 20:08:04, 2022-07-…\n$ ended_at           <dttm> 2022-07-26 19:59:34, 2022-07-26 19:59:34, 2022-07-…\n$ start_station_name <chr> \"Lincoln Ave & Roscoe St*\", \"Lincoln Ave & Roscoe S…\n$ start_station_id   <chr> \"chargingstx5\", \"chargingstx5\", \"chargingstx5\", \"ch…\n$ end_station_name   <chr> \"Lincoln Ave & Roscoe St*\", \"Lincoln Ave & Roscoe S…\n$ end_station_id     <chr> \"chargingstx5\", \"chargingstx5\", \"chargingstx5\", \"ch…\n$ start_lat          <dbl> 41.94335, 41.94335, 41.94335, 41.94335, 41.93945, 4…\n$ start_lng          <dbl> -87.67067, -87.67067, -87.67067, -87.67067, -87.663…\n$ end_lat            <dbl> 41.94335, 41.94335, 41.94335, 41.94335, 41.93948, 4…\n$ end_lng            <dbl> -87.67067, -87.67067, -87.67067, -87.67067, -87.663…\n$ member_casual      <chr> \"member\", \"member\", \"casual\", \"casual\", \"member\", \"…\n$ ride_length        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stations_travelled <chr> \"Lincoln Ave & Roscoe St* - Lincoln Ave & Roscoe St…\n```\n:::\n:::\n\n\n-   Finding which route is most traveled by **casual riders**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_travelled_routes_casual <- data_one_year %>%\n  filter(member_casual == \"casual\") %>% \n  summarise(ride_count = n(),\n            avg_ride_length = round(mean(ride_length), 2),\n            .by = c(stations_travelled)) %>%\n  arrange(desc(ride_count))\n\nhead(most_travelled_routes_casual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  stations_travelled                                  ride_count avg_ride_length\n  <chr>                                                    <int>           <dbl>\n1 Streeter Dr & Grand Ave - Streeter Dr & Grand Ave         9698            39.6\n2 DuSable Lake Shore Dr & Monroe St - DuSable Lake S…       6584            33.4\n3 DuSable Lake Shore Dr & Monroe St - Streeter Dr & …       4840            27.1\n4 Michigan Ave & Oak St - Michigan Ave & Oak St             4292            44.6\n5 Millennium Park - Millennium Park                         3884            37.4\n6 Montrose Harbor - Montrose Harbor                         2711            48.3\n```\n:::\n\n```{.r .cell-code}\nNROW(most_travelled_routes_casual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 130660\n```\n:::\n:::\n\n\n**Streeter Dr & Grand Ave - Streeter Dr & Grand Ave** stands to be the most popular station with **9698 rides** by **casual** riders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_travelled_routes_member <- data_one_year  %>%\n  filter(member_casual == \"member\") %>% \n  summarise(ride_count = n(),\n            total_ride_length = sum(ride_length),\n            ride_length = round(mean(ride_length), 2),\n            .by = stations_travelled) %>% arrange(desc(ride_count))\n\nhead(most_travelled_routes_member)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  stations_travelled                    ride_count total_ride_length ride_length\n  <chr>                                      <int>             <dbl>       <dbl>\n1 Ellis Ave & 60th St - University Ave…       6153            25936.        4.22\n2 University Ave & 57th St - Ellis Ave…       5786            26634.        4.6 \n3 Ellis Ave & 60th St - Ellis Ave & 55…       5676            28427.        5.01\n4 Ellis Ave & 55th St - Ellis Ave & 60…       5347            27187.        5.08\n5 State St & 33rd St - Calumet Ave & 3…       4156            18014.        4.33\n6 Calumet Ave & 33rd St - State St & 3…       4027            15887.        3.95\n```\n:::\n\n```{.r .cell-code}\nNROW(most_travelled_routes_member)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 145104\n```\n:::\n:::\n\n\n**Ellis Ave & 60th St - University Ave & 57th St** stands as the most traveled route by **member** riders with **6153** rides per anum.\n\n-   Finding which station has most ride starting points and which station has most ending points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_starting_points <- data_one_year %>% \n  summarise(ride_count = n(),\n            .by = start_station_name) %>%\n  select(start_station_name, ride_count) %>%\n  slice_max(ride_count, n = 10)\n\nmost_starting_points\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   start_station_name                 ride_count\n   <chr>                                   <int>\n 1 Streeter Dr & Grand Ave                 65892\n 2 DuSable Lake Shore Dr & Monroe St       37939\n 3 Michigan Ave & Oak St                   36036\n 4 DuSable Lake Shore Dr & North Blvd      35091\n 5 Wells St & Concord Ln                   33250\n 6 Clark St & Elm St                       32751\n 7 Kingsbury St & Kinzie St                31876\n 8 Millennium Park                         30917\n 9 Theater on the Lake                     29600\n10 Wells St & Elm St                       28063\n```\n:::\n\n```{.r .cell-code}\nmost_starting_points$ride_count %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 361415\n```\n:::\n\n```{.r .cell-code}\nmost_ending_points <- data_one_year %>% \n  summarise(ride_count = n(),\n            .by = end_station_name) %>%\n  select(end_station_name, ride_count)  %>% \n  slice_max(ride_count, n = 10)\n\nmost_ending_points\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   end_station_name                   ride_count\n   <chr>                                   <int>\n 1 Streeter Dr & Grand Ave                 67536\n 2 DuSable Lake Shore Dr & North Blvd      38026\n 3 Michigan Ave & Oak St                   36976\n 4 DuSable Lake Shore Dr & Monroe St       36806\n 5 Wells St & Concord Ln                   33814\n 6 Clark St & Elm St                       32325\n 7 Millennium Park                         32046\n 8 Kingsbury St & Kinzie St                31058\n 9 Theater on the Lake                     30214\n10 Wells St & Elm St                       28212\n```\n:::\n\n```{.r .cell-code}\nmost_ending_points$ride_count %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367013\n```\n:::\n:::\n\n\n**Streeter Dr & Grand Ave** found to be the most popular station as most rides start and end at that station.\n\n### Looking at Filtered data\n\nJust because we filtered the data with NA's that does not mean that the data is not helpful, it just means that it does not our fulfill specific need when calculating or manipulating data.\n\nLet's look at NA's in the data once again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_in_cols <- data_one_year_raw %>% map( ~sum(is.na(.))) %>% unlist()\n\nna_in_cols\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           ride_id      rideable_type         started_at           ended_at \n                 0                  0                  0                  0 \nstart_station_name   start_station_id   end_station_name     end_station_id \n            857860             857992             915655             915796 \n         start_lat          start_lng            end_lat            end_lng \n                 0                  0               5795               5795 \n     member_casual        ride_length \n                 0                  0 \n```\n:::\n:::\n\n\n- We can see that the `start_station_name` and `end_station_name` have majority of NA's it means that rides are starting and ending where stations are not there.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop_na <- na_in_cols[\"start_station_name\"]/nrow(data_one_year_raw)\n\nprop_na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstart_station_name \n          0.148433 \n```\n:::\n:::\n\n\n-   14.8432963% of data in `start_station_name` is missing and good thing is that none of the `start_lng` and `start_lat` have any NA's and we can use this for find the most traveled routes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_na_one_year <- data_one_year_raw %>% \n  filter(is.na(start_station_name) | start_station_name == \"\") %>% \n  drop_na(end_lat, end_lng)\n  \nglimpse(data_na_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 857,860\nColumns: 14\n$ ride_id            <chr> \"DCB3D2C9B63999EC\", \"D1ACA8280DA02AE3\", \"EF98673429…\n$ rideable_type      <chr> \"electric_bike\", \"electric_bike\", \"electric_bike\", …\n$ started_at         <dttm> 2022-07-04 15:04:26, 2022-07-12 14:43:51, 2022-07-…\n$ ended_at           <dttm> 2022-07-04 15:32:38, 2022-07-12 14:49:28, 2022-07-…\n$ start_station_name <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ start_station_id   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ end_station_name   <chr> \"Ashland Ave & Blackhawk St\", \"Cornell Ave & Hyde P…\n$ end_station_id     <chr> \"13224\", \"KA1503000007\", \"KA1503000007\", \"847\", \"48…\n$ start_lat          <dbl> 41.95, 41.80, 41.80, 41.74, 42.02, 41.95, 41.95, 41…\n$ start_lng          <dbl> -87.64, -87.59, -87.59, -87.55, -87.69, -87.67, -87…\n$ end_lat            <dbl> 41.90707, 41.80241, 41.80241, 41.73000, 42.01000, 4…\n$ end_lng            <dbl> -87.66725, -87.58692, -87.58692, -87.55000, -87.690…\n$ member_casual      <chr> \"member\", \"member\", \"member\", \"member\", \"member\", \"…\n$ ride_length        <dbl> 28.200000, 5.616667, 2.600000, 20.350000, 3.700000,…\n```\n:::\n:::\n\n\n- Now let's make new columns `start_point` with `start_lng` and `start_lat` and `end_point` with `end_lat` and `end_lng`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_na_one_year <- data_na_one_year %>%\n    mutate(start_point = paste(start_lat, start_lng),\n           end_point = paste(end_lat, end_lng))\n\nglimpse(data_na_one_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 857,860\nColumns: 16\n$ ride_id            <chr> \"DCB3D2C9B63999EC\", \"D1ACA8280DA02AE3\", \"EF98673429…\n$ rideable_type      <chr> \"electric_bike\", \"electric_bike\", \"electric_bike\", …\n$ started_at         <dttm> 2022-07-04 15:04:26, 2022-07-12 14:43:51, 2022-07-…\n$ ended_at           <dttm> 2022-07-04 15:32:38, 2022-07-12 14:49:28, 2022-07-…\n$ start_station_name <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ start_station_id   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ end_station_name   <chr> \"Ashland Ave & Blackhawk St\", \"Cornell Ave & Hyde P…\n$ end_station_id     <chr> \"13224\", \"KA1503000007\", \"KA1503000007\", \"847\", \"48…\n$ start_lat          <dbl> 41.95, 41.80, 41.80, 41.74, 42.02, 41.95, 41.95, 41…\n$ start_lng          <dbl> -87.64, -87.59, -87.59, -87.55, -87.69, -87.67, -87…\n$ end_lat            <dbl> 41.90707, 41.80241, 41.80241, 41.73000, 42.01000, 4…\n$ end_lng            <dbl> -87.66725, -87.58692, -87.58692, -87.55000, -87.690…\n$ member_casual      <chr> \"member\", \"member\", \"member\", \"member\", \"member\", \"…\n$ ride_length        <dbl> 28.200000, 5.616667, 2.600000, 20.350000, 3.700000,…\n$ start_point        <chr> \"41.95 -87.64\", \"41.8 -87.59\", \"41.8 -87.59\", \"41.7…\n$ end_point          <chr> \"41.907066 -87.667252\", \"41.802406 -87.586924\", \"41…\n```\n:::\n:::\n\n\n- Aggregating data to check for the most traveled routes without a `start_station` name.\n\nFirst join `start_point` and `end_point` to make `route_travelled` then count the rides by `routes_travelled` to see the most traveled path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_travelled_na_routes <- data_na_one_year %>%\n  filter(start_point != end_point) %>% \n  mutate(route_travelled = paste(start_point, \",\", end_point)) %>% \n  summarise(ride_count = n(),\n            .by = route_travelled) %>%\n  slice_max(ride_count, n=10)\n\nmost_travelled_na_routes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   route_travelled                             ride_count\n   <chr>                                            <int>\n 1 41.79 -87.6 , 41.8 -87.59                         1459\n 2 41.79 -87.59 , 41.79 -87.6                        1354\n 3 41.8 -87.59 , 41.79 -87.6                         1335\n 4 41.79 -87.6 , 41.79 -87.59                        1320\n 5 41.8 -87.6 , 41.79 -87.6                          1099\n 6 41.79 -87.6 , 41.78509714636 -87.6010727606       1058\n 7 41.79 -87.6 , 41.8 -87.6                           999\n 8 41.79 -87.6 , 41.799568 -87.594747                 917\n 9 41.79 -87.6 , 41.78 -87.6                          697\n10 41.89 -87.63 , 41.9 -87.63                         690\n```\n:::\n:::\n\n- **1459**rides are not small when compared to most traveled routes.\n\n- To increase the memberships of the **Cyclist Bike Share** the company needs to place stations where most unknown routes are traveled by the riders.\n\n\n\n",
    "supporting": [
      "divy_tripdata_202207_202306_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}