{
  "hash": "21231a00e09c5072c3e5eec0e59f3218",
  "result": {
    "markdown": "---\ntitle: \"Medicines Side-effects and their Substitutes\"\nauthor: \"Ajay A\"\ndate: \"2024-10-10\"\nformat:\n  html:\n    code-overflow: wrap\n    code-tools: TRUE\n    code-fold: show\ncategories: [Analysis, Code, EDA]\n---\n\n\nThis dataset contains comprehensive information on over 248,000 medical drugs from all manufacturers available worldwide. The data includes details such as drug names, active ingredients, therapeutic uses, dosage, side effects, and substitutes. The dataset aims to provide a useful resource for medical researchers, healthcare professionals, and drug manufacturers.\n\n## Importing Libraries\n\nFor data manipulation and tidying up data `tidyverse` package in `R` has always been best. `tidyverse` is a collection of packages of `R` such as\n\n-   `dplyr` and `tidyr` for manipulating data\n-   `ggplot2` for visualizing and rendering plots\n-   `lubridate` for dealing with dates and time series\n-   `forcats` for factoring of data\n-   `readr` for importing, reading, writing different file formats\n\nLets import the libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_data <- read_csv(\"F:/r_language/quarto/blog/Data/250k Medicines Usage, Side Effects and Substitutes.csv\",\n  guess_max = 30000) #guess_max function is used to correctly guess the type of the columns\n```\n:::\n\n\nWe imported the `.csv` file and we can see there are a total of **248218 rows** and **58 columns** in which 1 column is `integer(dbl)` 57 columns are classifies as `character(chr)` . The function `guess_max` makes sure that column type is identified correctly in the data.\n\n### Glancing data\n\nNow lets take a sneak peek into the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_data %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 248,218\nColumns: 58\n$ id                  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,…\n$ name                <chr> \"augmentin 625 duo tablet\", \"azithral 500 tablet\",…\n$ substitute0         <chr> \"Penciclav 500 mg/125 mg Tablet\", \"Zithrocare 500m…\n$ substitute1         <chr> \"Moxikind-CV 625 Tablet\", \"Azax 500 Tablet\", \"Ambr…\n$ substitute2         <chr> \"Moxiforce-CV 625 Tablet\", \"Zady 500 Tablet\", \"Zer…\n$ substitute3         <chr> \"Fightox 625 Tablet\", \"Cazithro 500mg Tablet\", \"Ca…\n$ substitute4         <chr> \"Novamox CV 625mg Tablet\", \"Trulimax 500mg Tablet\"…\n$ sideEffect0         <chr> \"Vomiting\", \"Vomiting\", \"Nausea\", \"Headache\", \"Sle…\n$ sideEffect1         <chr> \"Nausea\", \"Nausea\", \"Vomiting\", \"Drowsiness\", \"Dry…\n$ sideEffect2         <chr> \"Diarrhea\", \"Abdominal pain\", \"Diarrhea\", \"Dizzine…\n$ sideEffect3         <chr> NA, \"Diarrhea\", \"Upset stomach\", \"Nausea\", NA, \"Sk…\n$ sideEffect4         <chr> NA, NA, \"Stomach pain\", NA, NA, \"Flu-like symptoms…\n$ sideEffect5         <chr> NA, NA, \"Allergic reaction\", NA, NA, \"Headache\", N…\n$ sideEffect6         <chr> NA, NA, \"Dizziness\", NA, NA, \"Drowsiness\", NA, NA,…\n$ sideEffect7         <chr> NA, NA, \"Headache\", NA, NA, \"Dizziness\", NA, NA, N…\n$ sideEffect8         <chr> NA, NA, \"Rash\", NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect9         <chr> NA, NA, \"Hives\", NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ sideEffect10        <chr> NA, NA, \"Tremors\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ sideEffect11        <chr> NA, NA, \"Palpitations\", NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect12        <chr> NA, NA, \"Muscle cramp\", NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect13        <chr> NA, NA, \"Increased heart rate\", NA, NA, NA, NA, NA…\n$ sideEffect14        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect15        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect16        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect17        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect18        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect19        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect20        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect21        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect22        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect23        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect24        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect25        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect26        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect27        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect28        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect29        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect30        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect31        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect32        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect33        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect34        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect35        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect36        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect37        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect38        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect39        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect40        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sideEffect41        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use0                <chr> \"Treatment of Bacterial infections\", \"Treatment of…\n$ use1                <chr> NA, NA, NA, \"Treatment of Allergic conditions\", NA…\n$ use2                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use3                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use4                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `Chemical Class`    <chr> NA, \"Macrolides\", NA, \"Diphenylmethane Derivative\"…\n$ `Habit Forming`     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…\n$ `Therapeutic Class` <chr> \"ANTI INFECTIVES\", \"ANTI INFECTIVES\", \"RESPIRATORY…\n$ `Action Class`      <chr> NA, \"Macrolides\", NA, \"H1 Antihistaminics (second …\n```\n:::\n\n```{.r .cell-code}\n# finding rows and columns of data\nmed_data %>% dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 248218     58\n```\n:::\n:::\n\n\nA total of `{r} nrow(med_data)` rows are present with `{r} ncol(med_data)` columns in which the\n\n-   `id` is a number that can act as a primary key\n-   `name` is the name of the drugs. - `substitute0` to `substitue4` are alternate drugs to the drug in 2nd column that has the same use. - `sideEffect0` to `sideEffect41` are side-effects caused by the drug - `use0` to `use4` are what drug can be used to cure\n-   `Chemical Class` is the chemical group of the medicine\n-   `Habit Forming` is if a drug is addictive or not\n-   `Therapeutic Class` is about how a drug is intended to work\n-   `Action Class` is categorization a drug works in the system\n\n## Cleaning the data\n\nWe can't be sure that all the data in the columns is without any excess spaces and wrongly indented commas or brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# converting all the columns of character to lower case letters\nmed_data <- med_data %>%\n  rename_with(~gsub(\" \", \"_\", tolower(.x))) %>% \n  mutate(across(where(is_character), ~tolower(.))) %>% \n  mutate(across(where(is_character), ~trimws(.)))\n\n# replacing all the '{' with '(' and '}' with ')'\n\nmed_data <- med_data %>% \n  mutate(chemical_class = str_replace_all(chemical_class, \"\\\\{\", \"\\\\(\"),\n         chemical_class = str_replace_all(chemical_class, \"\\\\}\", \"\\\\)\"))\n```\n:::\n\n\n### Finding `NA`s and Dulicates\n\nLets look at `NA`s in the data and the duplicates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# finding NA's in each columns\nmed_data %>% map(~sum(is.na(.))) %>% unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               id              name       substitute0       substitute1 \n                0                 0              9597             14351 \n      substitute2       substitute3       substitute4       sideeffect0 \n            17985             21362             24256                 0 \n      sideeffect1       sideeffect2       sideeffect3       sideeffect4 \n             9802             18718             40580             84658 \n      sideeffect5       sideeffect6       sideeffect7       sideeffect8 \n           116960            156361            180468            199712 \n      sideeffect9      sideeffect10      sideeffect11      sideeffect12 \n           210510            220944            227887            231936 \n     sideeffect13      sideeffect14      sideeffect15      sideeffect16 \n           233491            237799            240537            242209 \n     sideeffect17      sideeffect18      sideeffect19      sideeffect20 \n           242836            243703            244272            244995 \n     sideeffect21      sideeffect22      sideeffect23      sideeffect24 \n           245093            245170            245313            245495 \n     sideeffect25      sideeffect26      sideeffect27      sideeffect28 \n           246715            246715            246724            246724 \n     sideeffect29      sideeffect30      sideeffect31      sideeffect32 \n           246780            246889            246889            246890 \n     sideeffect33      sideeffect34      sideeffect35      sideeffect36 \n           247049            247052            248216            248216 \n     sideeffect37      sideeffect38      sideeffect39      sideeffect40 \n           248216            248216            248216            248216 \n     sideeffect41              use0              use1              use2 \n           248216                 0            174853            219911 \n             use3              use4    chemical_class     habit_forming \n           240839            243247            110427                 0 \ntherapeutic_class      action_class \n               69            110182 \n```\n:::\n\n```{.r .cell-code}\n# finding duplicates\nduplicated(med_data) %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nThere are no duplicated values but there are so many `NA`s which is not helpful. Only 5 columns i.e., `id`, `name`, `sideEffect0`, `use0`, `Habit Forming` does not have any empty values in the column.\n\n### Finding unique values\n\nEven though there no \"NA\"s in `id` and `name` of the drug lets make sure there are no duplicates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# counting unique values in each column\nmed_data %>% map(n_distinct) %>% unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               id              name       substitute0       substitute1 \n           248218            222825             19374             16309 \n      substitute2       substitute3       substitute4       sideeffect0 \n            14289             12774             11689               326 \n      sideeffect1       sideeffect2       sideeffect3       sideeffect4 \n              335               352               363               359 \n      sideeffect5       sideeffect6       sideeffect7       sideeffect8 \n              325               299               275               254 \n      sideeffect9      sideeffect10      sideeffect11      sideeffect12 \n              232               212               182               174 \n     sideeffect13      sideeffect14      sideeffect15      sideeffect16 \n              145               121                95                78 \n     sideeffect17      sideeffect18      sideeffect19      sideeffect20 \n               66                52                42                36 \n     sideeffect21      sideeffect22      sideeffect23      sideeffect24 \n               30                25                18                14 \n     sideeffect25      sideeffect26      sideeffect27      sideeffect28 \n               11                11                10                10 \n     sideeffect29      sideeffect30      sideeffect31      sideeffect32 \n                9                 6                 6                 5 \n     sideeffect33      sideeffect34      sideeffect35      sideeffect36 \n                4                 3                 2                 2 \n     sideeffect37      sideeffect38      sideeffect39      sideeffect40 \n                2                 2                 2                 2 \n     sideeffect41              use0              use1              use2 \n                2               655               335               139 \n             use3              use4    chemical_class     habit_forming \n               74                34               833                 2 \ntherapeutic_class      action_class \n               23               432 \n```\n:::\n:::\n\n\nThere over 2,48,218 `id`s but 222825 drug names are present at least 24000 names are repeated. Lets check which are repeated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nduplicated_values <- med_data %>% select(-id) %>% duplicated()\n\nduplicated_values %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24204\n```\n:::\n:::\n\n\nLets remove duplicates from the datafame and create a dataset with unique values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using filter function to remove duplicates\nmed_data_unique <- med_data %>% filter(!duplicated(select(., -id)))\n\ndim(med_data_unique)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 224014     58\n```\n:::\n:::\n\n\n## Data Manipulation\n\n### Pivoting Data\n\nFor machines longer format data is much more readable and workable than wider format and we can drop `NA`s in the columns much more easily, without loosing data but it also comes at a cost while longer format data is easy for machines to read but very difficult for humans to comprehend and the number of rows can increase to very high numbers to a point that it's not worth it.\n\nWe can pivot data and make the wide data format into narrow data format and make it more accessible to manipulate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: pivoting_substitute_drug\n\n# pivoting data\nmed_data_sub <- med_data_unique %>% select(id:substitute4, use0:use4) %>% \n  pivot_longer(cols = starts_with(\"substitute\"),\n               names_to = \"sub_num\",\n               values_to = \"substitute_drug\")\n# counting NA's\nmed_data_sub %>% map(~sum(is.na(.))) %>% unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             id            name            use0            use1            use2 \n              0               0               0          786770          991525 \n           use3            use4         sub_num substitute_drug \n        1086255         1097150               0           80639 \n```\n:::\n\n```{.r .cell-code}\nglimpse(med_data_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,120,070\nColumns: 9\n$ id              <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, …\n$ name            <chr> \"augmentin 625 duo tablet\", \"augmentin 625 duo tablet\"…\n$ use0            <chr> \"treatment of bacterial infections\", \"treatment of bac…\n$ use1            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use2            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use3            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ use4            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ sub_num         <chr> \"substitute0\", \"substitute1\", \"substitute2\", \"substitu…\n$ substitute_drug <chr> \"penciclav 500 mg/125 mg tablet\", \"moxikind-cv 625 tab…\n```\n:::\n:::\n\n\nAs you can see the data only has 9 columns and 1241090 rows.\n\nNow lets pivot the `use` of the drugs so that we can make the data more tidy which helps with removing of the duplicates and the `NA` values easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivoting data \nmedi_use_pivot <- \n  med_data_sub %>% select(-sub_num) %>% \n  pivot_longer(cols = starts_with(\"use\"),\n               names_to = \"use_num\",\n               values_to = \"use\") %>% \n  select(-use_num) %>% filter(!is.na(use))\n\n# checking for NA values\nmedi_use_pivot %>% map(~sum(is.na(.))) %>% unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             id            name substitute_drug             use \n              0               0          111133               0 \n```\n:::\n\n```{.r .cell-code}\n# checking for duplicates\nmedi_use_pivot %>% duplicated() %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 88192\n```\n:::\n\n```{.r .cell-code}\n# removing duplicated data\nmed_use <- medi_use_pivot %>% filter(!duplicated(.))\n\n# glimpse of data\nglimpse(med_use)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,550,458\nColumns: 4\n$ id              <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, …\n$ name            <chr> \"augmentin 625 duo tablet\", \"augmentin 625 duo tablet\"…\n$ substitute_drug <chr> \"penciclav 500 mg/125 mg tablet\", \"moxikind-cv 625 tab…\n$ use             <chr> \"treatment of bacterial infections\", \"treatment of bac…\n```\n:::\n:::\n\n\nWe can use pivot method for `sideEffect`s to convert the data into a longer format. I am doing this case by case and not all in a single table because that would cause very long tables and a lot of `NA`s which would be hard to filter and we can join different tables using `*_join` functions with `id` column as it can act as a primary key.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivoting data with side-effect columns\n\nside_effect_med <- \n  med_data_unique %>% select(id, name, sideeffect0:sideeffect41) %>%\n  pivot_longer(cols = starts_with(\"sideeffect\"),\n               names_to = \"sideeffect_num\",\n               values_to = \"side_effects\") %>% \n  select(-sideeffect_num)\n\n# counting NA and duplicates\nside_effect_med %>% map(~sum(is.na(.))) %>% unlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          id         name side_effects \n           0            0      7950288 \n```\n:::\n\n```{.r .cell-code}\n# dropping NA's and duplicates\nside_effect_med <- side_effect_med %>% drop_na() %>% \n  filter(!duplicated(.))\n\n# finding duplicates\nduplicated(side_effect_med) %>% sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nglimpse(side_effect_med)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,458,295\nColumns: 3\n$ id           <dbl> 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ name         <chr> \"augmentin 625 duo tablet\", \"augmentin 625 duo tablet\", \"…\n$ side_effects <chr> \"vomiting\", \"nausea\", \"diarrhea\", \"vomiting\", \"nausea\", \"…\n```\n:::\n:::\n\n\nNow lets use pivoted data to plot graphs\n\n## Visualising with `ggplot2`\n\n`ggplot2` is one of the most versatile packages I have come across for the purpose of visualizing using **Grammar of Graphics**\n\n### Bar plots\n\nLet's find out and plot to which class most of the drugs in data belong to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchem_cl_top_10 <-  \n  med_data_unique %>% select(name, chemical_class) %>% \n  count(chemical_class) %>% rename(\"number_of_meds\" = n) %>% \n  slice_max(number_of_meds, n=10) %>%\n  filter(chemical_class != \"NA\") %>% \n  mutate(chemical_class = str_to_sentence(chemical_class))\n\nchem_cl_top_10 %>% \n  ggplot(aes(x = fct_reorder(chemical_class, number_of_meds),\n             y = number_of_meds)) +\n  geom_col(aes(fill = chemical_class)) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.y = element_text(size = 10)) +\n  labs(x = \"Chemical Class\", y= \"Number of Medicines\",\n       title = \"Most Common Chemical Class\"\n       ) +\n  theme(plot.title = element_text(size = 20)) +\n  scale_fill_brewer(palette = \"Set1\") + coord_flip()\n```\n\n::: {.cell-output-display}\n![Most common drug classes](Medicines_usage_sideeffects_files/figure-html/common_drug_classes-1.png){width=960}\n:::\n:::\n\n\nBy the graph we know that most of the drugs in data belong to the chemical class `{r} chem_cl_top_10[1,1]` with `{r} chem_cl_top_10[1,2]` drugs belong to that class, followed by `{r} chem_cl_top_10[2,1]` with `{r} chem_cl_top_10[2,2]` followed by `{r} chem_cl_top_10[3,1]`, `{r} chem_cl_top_10[4, 1]` and `{r} chem_cl_top_10[5, 1]`.\n\nNow, that we have some basic idea of the data lets answer some questions\n\n## Finding Answers to Specific Questions\n\nNow, that we have some basic idea of the data lets answer some questions\n\nLets begin with simple ones\n\n### Addictive drugs\n\nLets find the most addictive drugs in the data set and to which chemical class they belong to.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhabit_forming_classes <- \n  med_data_unique %>% filter(habit_forming == \"yes\") %>% \n  select(name, chemical_class) %>%\n  count(chemical_class, sort = TRUE)\n\nhabit_forming_classes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 2\n   chemical_class                                   n\n   <chr>                                        <int>\n 1 <NA>                                          2532\n 2 benzodiazepines derivative                    2025\n 3 anisole derivative                             365\n 4 imidazopyridine derivative                     194\n 5 benzodiazepine derivative                       83\n 6 barbituric acid derivative                      55\n 7 diphenylmethane derivative                      49\n 8 cyclopyrrolone derivative                       28\n 9 phenanthrenes derivatives                       26\n10 phenanthrenes derivative                        22\n11 aralkylamine derivative                         21\n12 benzomorphan derivatives                        20\n13 phenylpiperidine derivatives                    12\n14 pyrazolopyrimidine derivative                   11\n15 ultrashort-acting barbituric acid derivative    11\n16 amphetamines derivatives                         6\n17 phenylheptylamines derivative                    1\n```\n:::\n:::\n\n\nWe can see in the table that `{r} habit_forming_classes[1,2]` drugs which are addictive does not have their class mentioned, while `{r} habit_forming_classes[2,1]` have `{r} habit_forming_classes[2,2]` drugs which are habit forming.\n\n### No Substitute Drugs\n\nFind the drugs with no substitute drugs, that have less side-effects, is not habit forming, and has many uses\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_data_unique %>%\n  # finding drugs with no sbustitute\n  filter(if_all(substitute0:substitute4, is.na) &\n         # medicine with no one side-effect\n         if_all(sideeffect1:sideeffect41, is.na) &\n           sideeffect0 == \"no common side effects seen\" &\n         # Medicine with most uses\n         if_all(use0:use2, ~!is.na(.)) &\n         # not habit forming\n         habit_forming == \"no\" &\n         # Chemical Class, therapeutic class,action class is known\n         !is.na(chemical_class) &\n         !is.na(therapeutic_class) &\n         !is.na(action_class)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 58\n     id name         substitute0 substitute1 substitute2 substitute3 substitute4\n  <dbl> <chr>        <chr>       <chr>       <chr>       <chr>       <chr>      \n1 33940 bentoform d… <NA>        <NA>        <NA>        <NA>        <NA>       \n# ℹ 51 more variables: sideeffect0 <chr>, sideeffect1 <chr>, sideeffect2 <chr>,\n#   sideeffect3 <chr>, sideeffect4 <chr>, sideeffect5 <chr>, sideeffect6 <chr>,\n#   sideeffect7 <chr>, sideeffect8 <chr>, sideeffect9 <chr>,\n#   sideeffect10 <chr>, sideeffect11 <chr>, sideeffect12 <chr>,\n#   sideeffect13 <chr>, sideeffect14 <chr>, sideeffect15 <chr>,\n#   sideeffect16 <chr>, sideeffect17 <chr>, sideeffect18 <chr>,\n#   sideeffect19 <chr>, sideeffect20 <chr>, sideeffect21 <chr>, …\n```\n:::\n:::\n\n\nAmong the `{r} nrow(med_data_unique)` drugs only **Betoform Dental Gel** is the drug with No known side-effects, no alternate drugs, is not habit forming and has a known *Chemical Class*.\n\n### Most Popular Drug form\n\nLets find the most common type of form i.e, Tablet, Tonic, etc. in the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_data_unique[2,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  name               \n  <chr>              \n1 azithral 500 tablet\n```\n:::\n:::\n\n\nThe medicine name in the end contains its form but it might not be true for all so lets do a string search so that the for is detected correctly in which it is sold or consumed if we extract it into a separate column we can know the most popular type.\n\nMaking a new dataframe by detecting strings of the column `name`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_form_df <- \n  med_data_unique %>%\n  select(name) %>%\n  mutate(med_type = case_when(\n    # searching for specific type of medicine and making it a column\n    str_detect(name, \"tablet\") ~ \"tablet\",\n    str_detect(name, \"capsule\") ~ \"capsule\",\n    str_detect(name, \"syrup\") ~ \"syrup\",\n    str_detect(name, \"oral suspension\") ~ \"oral suspension\",\n    str_detect(name, \"suspension\") ~ \"suspension\",\n    str_detect(name, \"cream|lotion\") ~ \"cream\",\n    str_detect(name, \".*gel\") ~ \"gel\",\n    str_detect(name, \"drop|drops\") ~ \"drop\",\n    str_detect(name, \"bar|bars\") ~ \"bar\",\n    str_detect(name, \"solution|solutions\") ~ \"solution\",\n    str_detect(name, \".*cap|.*caps\") ~ \"caps\",\n    str_detect(name, \"infusion\") ~ \"infusion\",\n    str_detect(name, \"injection\") ~ \"injection\",\n    str_detect(name, \"granules\") ~ \"granules\",\n    TRUE ~ \"others\"\n  )) %>%\n  filter(!is.na(med_type)) %>%\n  count(med_type, sort = TRUE)\n\nmed_form_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 2\n   med_type             n\n   <chr>            <int>\n 1 tablet          135267\n 2 injection        26643\n 3 capsule          18966\n 4 syrup            16003\n 5 drop              5508\n 6 cream             5502\n 7 others            5319\n 8 oral suspension   4373\n 9 suspension        2510\n10 gel               1731\n11 solution          1014\n12 infusion           767\n13 caps               275\n14 granules            78\n15 bar                 58\n```\n:::\n:::\n\n\nAs we can see that ***Tablets*** is the most common form with `{r} med_form_df[1,2]` followed by ***Injection*** with `{r} med_form_df[2,2]`, ***Capsules*** and ***Syrups*** take third and fourth place respectively.\n\n### Most Common Side-Effects\n\nThis is where pivoting data comes to the use, we cannot find the most common side-effect as there are 42 columns of them with NAs in the middle which gets complicated. By pivoting data to longer format we make each side-effect has its own row which leads to removal of NA easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nside_effect_med %>% \n  filter(side_effects != \"no common side effects seen\") %>%\n  count(side_effects, sort = TRUE) %>%  \n  slice_max(n, n = 10) %>% \n  mutate(side_effects = str_to_title(side_effects)) %>% \n  ggplot(aes(x = fct_reorder(side_effects, n), y = n)) +\n  geom_col(aes(fill = n)) +\n  scale_y_continuous(\n    labels = scales::number_format(scale = 1e-3, suffix = \"K\")\n  ) +\n  labs(x = \"Side-effects\", y = \"Frequency\", \n       title = \"Most Common Side-effects\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Most Common Side-effects](Medicines_usage_sideeffects_files/figure-html/common side-effects-1.png){width=960}\n:::\n:::\n\n\n### Action class with most unique Side-effects\n\nLets find which `action_class` has most unique side-effects in the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\naction_class_sideeffects <-\n  med_data_unique %>% select(name, sideeffect0:sideeffect41,\n                           action_class) %>% \n  pivot_longer(cols = sideeffect0:sideeffect41,\n               names_to = \"sideeffect_num\",\n               values_to = \"side_effect\") %>%\n  # removing medicine name and sideeffect_num\n  select(-sideeffect_num, -name) %>%\n  # removing duplicates so that only unique side-effect & action_class remain\n  filter(!duplicated(.))\n  \naction_class_sideeffects %>% count(action_class, sort = TRUE) %>% \n  drop_na() %>% slice_max(n = 10, n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   action_class                        n\n   <chr>                           <int>\n 1 glucocorticoids                    88\n 2 tyrosine kinase inhibitors         79\n 3 vitamins                           73\n 4 anticancer-others                  66\n 5 antimetabolites                    66\n 6 atypical antipsychotics            65\n 7 sodium channel modulators (aed)    62\n 8 alkaloids-cytotoxic agents         56\n 9 alkylating agent                   53\n10 quinolones/ fluroquinolones        53\n```\n:::\n:::\n\n\nDrugs with **Glucocorticoids** have 88 unique side-effects, followed by **Tyrosine Kinase Inhibitors** with 79 , **Vitamins** and **Anticancer-others** come next.\n",
    "supporting": [
      "Medicines_usage_sideeffects_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}